{"version":3,"sources":["src/TableRenderers.jsx"],"names":["spanSize","arr","i","j","x","asc","end","noDraw","len","length","asc1","end1","stop","orders","desc","label","fn","a","b","naturalSort","redColorScaleGenerator","values","min","Math","apply","max","nonRed","round","backgroundColor","makeRenderer","opts","TableRenderer","pivotData","PivotData","props","colAttrs","cols","rowAttrs","rows","rowKeys","getRowKeys","colKeys","getColKeys","grandTotalAggregator","getAggregator","sorters","sortRow","enableRowSort","sortCol","enableColSort","rowTotals","colTotals","sorterCol","name","order","getUserSortedRowKeys","valueCellColors","rowTotalColors","colTotalColors","heatmapMode","colorScaleGenerator","tableColorScaleGenerator","rowTotalValues","map","value","colTotalValues","allValues","push","r","c","colorScale","v","rowColorScales","rowValues","colColorScales","colValues","joiner","String","fromCharCode","getSortRowClasses","key","classes","getSortedColClasses","colKey","keyStr","join","sorter","handleRowClick","wrapperFn","onChange","$merge","$set","updateSorterCol","val","handleColClick","keys","valKey","indexOf","oldOrder","getClickHandler","tableOptions","clickCallback","filters","Object","attr","e","rowKey","totalAggregator","txt","aggregator","format","React","PureComponent","defaultProps","propTypes","PropTypes","func","object","TSVExportRenderer","headerRow","aggregatorName","result","row","unshift","width","window","innerWidth","height","innerHeight","Table"],"mappings":"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","file":"TableRenderers.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PivotData, naturalSort } from './Utilities';\nimport update from 'immutability-helper';\n\n// helper function for setting row/col-span in pivotTableRenderer\nconst spanSize = function (arr, i, j) {\n  let x;\n  if (i !== 0) {\n    let asc, end;\n    let noDraw = true;\n    for (\n      x = 0, end = j, asc = end >= 0;\n      asc ? x <= end : x >= end;\n      asc ? x++ : x--\n    ) {\n      if (arr[i - 1][x] !== arr[i][x]) {\n        noDraw = false;\n      }\n    }\n    if (noDraw) {\n      return -1;\n    }\n  }\n  let len = 0;\n  while (i + len < arr.length) {\n    let asc1, end1;\n    let stop = false;\n    for (\n      x = 0, end1 = j, asc1 = end1 >= 0;\n      asc1 ? x <= end1 : x >= end1;\n      asc1 ? x++ : x--\n    ) {\n      if (arr[i][x] !== arr[i + len][x]) {\n        stop = true;\n      }\n    }\n    if (stop) {\n      break;\n    }\n    len++;\n  }\n  return len;\n};\n\nconst orders = {\n  desc: {\n    label: 'desc',\n    fn: (a, b) => -naturalSort(a, b)\n  },\n  asc: {\n    label: 'asc',\n    fn: naturalSort\n  }\n}\n\nfunction redColorScaleGenerator(values) {\n  const min = Math.min.apply(Math, values);\n  const max = Math.max.apply(Math, values);\n  return x => {\n    // eslint-disable-next-line no-magic-numbers\n    const nonRed = 255 - Math.round((255 * (x - min)) / (max - min));\n    return { backgroundColor: `rgb(255,${nonRed},${nonRed})` };\n  };\n}\n\nfunction makeRenderer(opts = {}) {\n  class TableRenderer extends React.PureComponent {\n    render() {\n      const pivotData = new PivotData(this.props);\n      const colAttrs = pivotData.props.cols;\n      const rowAttrs = pivotData.props.rows;\n      let rowKeys = pivotData.getRowKeys();\n      const colKeys = pivotData.getColKeys();\n      const grandTotalAggregator = pivotData.getAggregator([], []);\n      const sorters = pivotData.props.sorters;\n      const sortRow = pivotData.props.enableRowSort;\n      const sortCol = pivotData.props.enableColSort;\n      const { rowTotals, colTotals } = this.props;\n      const sorterCol = this.props.sorterCol;\n\n      if (sorterCol) {\n        const { name, order } = sorterCol\n        rowKeys = pivotData.getUserSortedRowKeys(name, order)\n      }\n\n      let valueCellColors = () => { };\n      let rowTotalColors = () => { };\n      let colTotalColors = () => { };\n      if (opts.heatmapMode) {\n        const colorScaleGenerator = this.props.tableColorScaleGenerator;\n        const rowTotalValues = colKeys.map(x =>\n          pivotData.getAggregator([], x).value()\n        );\n        rowTotalColors = colorScaleGenerator(rowTotalValues);\n        const colTotalValues = rowKeys.map(x =>\n          pivotData.getAggregator(x, []).value()\n        );\n        colTotalColors = colorScaleGenerator(colTotalValues);\n\n        if (opts.heatmapMode === 'full') {\n          const allValues = [];\n          rowKeys.map(r =>\n            colKeys.map(c =>\n              allValues.push(pivotData.getAggregator(r, c).value())\n            )\n          );\n          const colorScale = colorScaleGenerator(allValues);\n          valueCellColors = (r, c, v) => colorScale(v);\n        } else if (opts.heatmapMode === 'row') {\n          const rowColorScales = {};\n          rowKeys.map(r => {\n            const rowValues = colKeys.map(x =>\n              pivotData.getAggregator(r, x).value()\n            );\n            rowColorScales[r] = colorScaleGenerator(rowValues);\n          });\n          valueCellColors = (r, c, v) => rowColorScales[r](v);\n        } else if (opts.heatmapMode === 'col') {\n          const colColorScales = {};\n          colKeys.map(c => {\n            const colValues = rowKeys.map(x =>\n              pivotData.getAggregator(x, c).value()\n            );\n            colColorScales[c] = colorScaleGenerator(colValues);\n          });\n          valueCellColors = (r, c, v) => colColorScales[c](v);\n        }\n      }\n\n      const joiner = String.fromCharCode(0);\n      const getSortRowClasses = (order, key) => {\n        let classes = 'pvtTriangle sorterIcon ';\n        if (order === orders.desc) {\n          classes += 'rotate180 '\n        }\n        if (sorters[key] === order.fn) {\n          classes += 'activeSorterIcon'\n        }\n        return classes;\n      }\n\n      const getSortedColClasses = (order, key, colKey) => {\n        const keyStr = colKey.join(joiner);\n        const sorter = this.props.sorterCol;\n        let classes = 'pvtTriangle sorterIcon ';\n        if (order === orders.desc.label) {\n          classes += 'rotate180 ';\n        }\n        if (sorter && sorter.name === keyStr && sorter.order === order) {\n          classes += 'activeSorterIcon';\n        }\n        return classes;\n      }\n\n      const handleRowClick = (order = orders.asc, key) => {\n        // simple wrap the naturalSort fn so that it doesn't treated the same as asc func\n        const wrapperFn = (a, b) => naturalSort(a, b)\n        this.props.onChange(update(this.props, {\n          sorters: { $merge: { [key]: sorters[key] === order.fn ? wrapperFn : order.fn } },\n          sorterCol: { $set: {} },\n        }))\n      }\n\n      const updateSorterCol = val => {\n        this.props.onChange(update(this.props, {\n          sorterCol: { $set: val },\n          // only one works\n          sorters: { $set: {} }\n        }))\n      }\n\n      const handleColClick = (keys = [], key, order = orders.asc.label) => {\n        const rows = pivotData.props.rows;\n        if (rows.length < 1) { return }\n        const valKey = keys.join(joiner)\n        // handle last level of cols only\n        if (keys.indexOf(key) === keys.length - 1) {\n          if (sorterCol) {\n            const { name, order: oldOrder } = sorterCol\n            if (name === valKey && oldOrder === order) {\n              updateSorterCol(null)\n            } else {\n              updateSorterCol({ name: valKey, order })\n            }\n          } else {\n            updateSorterCol({ name: valKey, order })\n          }\n        }\n      }\n\n      const getClickHandler =\n        this.props.tableOptions && this.props.tableOptions.clickCallback\n          ? (value, rowValues, colValues) => {\n            const filters = {};\n            for (const i of Object.keys(colAttrs || {})) {\n              const attr = colAttrs[i];\n              if (colValues[i] !== null) {\n                filters[attr] = colValues[i];\n              }\n            }\n            for (const i of Object.keys(rowAttrs || {})) {\n              const attr = rowAttrs[i];\n              if (rowValues[i] !== null) {\n                filters[attr] = rowValues[i];\n              }\n            }\n            return e =>\n              this.props.tableOptions.clickCallback(\n                e,\n                value,\n                filters,\n                pivotData\n              );\n          }\n          : null;\n\n      return (\n        <table className=\"pvtTable\">\n          <thead>\n            {colAttrs.map(function (c, j) {\n              return (\n                <tr key={`colAttr${j}`}>\n                  {j === 0 && rowAttrs.length !== 0 && (\n                    <th colSpan={rowAttrs.length} rowSpan={colAttrs.length} />\n                  )}\n                  <th className=\"pvtAxisLabel\">{c}</th>\n                  {colKeys.map(function (colKey, i) {\n                    const x = spanSize(colKeys, i, j);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        className=\"pvtColLabel\"\n                        key={`colKey${i}`}\n                        colSpan={x}\n                        rowSpan={\n                          j === colAttrs.length - 1 && rowAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        <div className='flex-center'>\n                          {colKey[j]}\n                          {\n                            (sortCol && colKey && colKey.indexOf(colKey[j]) === colKey.length - 1) ?\n                              (<div className='sorters'>\n                                <div className={getSortedColClasses(orders.asc.label, colKey[j], colKey)}\n                                  onClick={() => handleColClick(colKey, colKey[j], orders.asc.label)}>▴</div>\n                                <div className={getSortedColClasses(orders.desc.label, colKey[j], colKey)}\n                                  onClick={() => handleColClick(colKey, colKey[j], orders.desc.label)}>▴</div>\n                              </div>) : null\n                          }\n                        </div>\n                      </th>\n                    );\n                  })}\n\n                  {j === 0 && rowTotals && (\n                    <th\n                      className=\"pvtTotalLabel\"\n                      rowSpan={\n                        colAttrs.length + (rowAttrs.length === 0 ? 0 : 1)\n                      }\n                    >\n                      Totals\n                    </th>\n                  )}\n                </tr>\n              );\n            })}\n\n            {rowAttrs.length !== 0 && (\n              <tr>\n                {rowAttrs.map(function (r, i) {\n                  return (\n                    <th className=\"pvtAxisLabel\" key={`rowAttr${i}`}>\n                      <div className=\"centered-sorters-box\">\n                        {r}\n                        {sortRow ? (\n                          <div className='sorters'>\n                            <div className={getSortRowClasses(orders.asc, r)}\n                              onClick={() => handleRowClick(orders.asc, r)}>▴</div>\n                            <div className={getSortRowClasses(orders.desc, r)}\n                              onClick={() => handleRowClick(orders.desc, r)}>▴</div>\n                          </div>\n                        ) : null}\n                      </div>\n                    </th>\n                  );\n                })}\n                <th className=\"pvtTotalLabel\">\n                  {colAttrs.length === 0 ? 'Totals' : null}\n                </th>\n              </tr>\n            )}\n          </thead>\n\n          <tbody>\n            {rowKeys.map(function (rowKey, i) {\n              const totalAggregator = pivotData.getAggregator(rowKey, []);\n              return (\n                <tr key={`rowKeyRow${i}`}>\n                  {rowKey.map(function (txt, j) {\n                    const x = spanSize(rowKeys, i, j);\n                    if (x === -1) {\n                      return null;\n                    }\n                    return (\n                      <th\n                        key={`rowKeyLabel${i}-${j}`}\n                        className=\"pvtRowLabel\"\n                        rowSpan={x}\n                        colSpan={\n                          j === rowAttrs.length - 1 && colAttrs.length !== 0\n                            ? 2\n                            : 1\n                        }\n                      >\n                        {txt}\n                      </th>\n                    );\n                  })}\n                  {colKeys.map(function (colKey, j) {\n                    const aggregator = pivotData.getAggregator(rowKey, colKey);\n                    return (\n                      <td\n                        className=\"pvtVal\"\n                        key={`pvtVal${i}-${j}`}\n                        onClick={\n                          getClickHandler &&\n                          getClickHandler(aggregator.value(), rowKey, colKey)\n                        }\n                        style={valueCellColors(\n                          rowKey,\n                          colKey,\n                          aggregator.value()\n                        )}\n                      >\n                        {aggregator.format(aggregator.value())}\n                      </td>\n                    );\n                  })}\n                   {\n                    rowTotals && (\n                      <td\n                        className=\"pvtTotal\"\n                        onClick={\n                          getClickHandler &&\n                          getClickHandler(totalAggregator.value(), rowKey, [null])\n                        }\n                        style={colTotalColors(totalAggregator.value())}\n                      >\n                        {totalAggregator.format(totalAggregator.value())}\n                      </td>\n                  )}\n                </tr>\n              );\n            })}\n             {\n              colTotals && (\n                <tr>\n                  <th\n                    className=\"pvtTotalLabel\"\n                    colSpan={rowAttrs.length + (colAttrs.length === 0 ? 0 : 1)}\n                  >\n                    Totals\n                  </th>\n                  {colKeys.map(function (colKey, i) {\n                    const totalAggregator = pivotData.getAggregator([], colKey);\n                    return (\n                      <td\n                        className=\"pvtTotal\"\n                        key={`total${i}`}\n                        onClick={\n                          getClickHandler &&\n                          getClickHandler(totalAggregator.value(), [null], colKey)\n                        }\n                        style={rowTotalColors(totalAggregator.value())}\n                      >\n                        {totalAggregator.format(totalAggregator.value())}\n                      </td>\n                    );\n                  })}\n                  {\n                    rowTotals && colTotals && (\n                        <td\n                        onClick={\n                          getClickHandler &&\n                          getClickHandler(grandTotalAggregator.value(), [null], [null])\n                        }\n                        className=\"pvtGrandTotal\"\n                      >\n                        {grandTotalAggregator.format(grandTotalAggregator.value())}\n                      </td>\n                    )\n                  }\n                </tr>\n            )}\n          </tbody>\n        </table>\n      );\n    }\n  }\n\n  TableRenderer.defaultProps = PivotData.defaultProps;\n  TableRenderer.propTypes = PivotData.propTypes;\n  TableRenderer.defaultProps.tableColorScaleGenerator = redColorScaleGenerator;\n  TableRenderer.defaultProps.tableOptions = {};\n  TableRenderer.defaultProps.rowTotals = true;\n  TableRenderer.defaultProps.colTotals = true;\n  TableRenderer.propTypes.tableColorScaleGenerator = PropTypes.func;\n  TableRenderer.propTypes.tableOptions = PropTypes.object;\n  return TableRenderer;\n}\n\nclass TSVExportRenderer extends React.PureComponent {\n  render() {\n    const pivotData = new PivotData(this.props);\n    const rowKeys = pivotData.getRowKeys();\n    const colKeys = pivotData.getColKeys();\n    if (rowKeys.length === 0) {\n      rowKeys.push([]);\n    }\n    if (colKeys.length === 0) {\n      colKeys.push([]);\n    }\n\n    const headerRow = pivotData.props.rows.map(r => r);\n    if (colKeys.length === 1 && colKeys[0].length === 0) {\n      headerRow.push(this.props.aggregatorName);\n    } else {\n      colKeys.map(c => headerRow.push(c.join('-')));\n    }\n\n    const result = rowKeys.map(r => {\n      const row = r.map(x => x);\n      colKeys.map(c => {\n        const v = pivotData.getAggregator(r, c).value();\n        row.push(v ? v : '');\n      });\n      return row;\n    });\n\n    result.unshift(headerRow);\n\n    return (\n      <textarea\n        value={result.map(r => r.join('\\t')).join('\\n')}\n        style={{ width: window.innerWidth / 2, height: window.innerHeight / 2 }}\n        readOnly={true}\n      />\n    );\n  }\n}\n\nTSVExportRenderer.defaultProps = PivotData.defaultProps;\nTSVExportRenderer.propTypes = PivotData.propTypes;\n\nexport default {\n  Table: makeRenderer(),\n  'Table Heatmap': makeRenderer({ heatmapMode: 'full' }),\n  'Table Col Heatmap': makeRenderer({ heatmapMode: 'col' }),\n  'Table Row Heatmap': makeRenderer({ heatmapMode: 'row' }),\n  'Exportable TSV': TSVExportRenderer,\n};"]}